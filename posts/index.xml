<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - Kunlun Jun</title><link>https://blog.kunlunjun.net/posts/</link><description>所有文章 | Kunlun Jun</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>swgrhck@gmail.com (swgrhck)</managingEditor><webMaster>swgrhck@gmail.com (swgrhck)</webMaster><copyright>本作品采用知识共享署名-相同方式共享 4.0 国际许可协议进行许可。</copyright><lastBuildDate>Wed, 26 May 2021 11:40:23 +0800</lastBuildDate><atom:link href="https://blog.kunlunjun.net/posts/" rel="self" type="application/rss+xml"/><item><title>Golang 中 Interface 的用法</title><link>https://blog.kunlunjun.net/posts/golang-interface-usages/</link><pubDate>Wed, 26 May 2021 11:40:23 +0800</pubDate><author>作者</author><guid>https://blog.kunlunjun.net/posts/golang-interface-usages/</guid><description>基于接口设计是保证代码通用性和扩展性最重要的也最有效的方法，本文将对 Golang 中的 Interface 进行介绍并给出推荐用法。</description></item><item><title>Golang 中的 Option 设计模式</title><link>https://blog.kunlunjun.net/posts/golang-option-design-pattern/</link><pubDate>Thu, 15 Apr 2021 00:32:49 +0800</pubDate><author>作者</author><guid>https://blog.kunlunjun.net/posts/golang-option-design-pattern/</guid><description>在 Golang 语言开发中，对于复杂的、可高度定制的功能，需要有良好的扩展性和兼容性，这里提供一种基于 Option 的设计模式，以解决此类问题。</description></item></channel></rss>